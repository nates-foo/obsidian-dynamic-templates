import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const PLUGIN_FILES = ['manifest.json', 'styles.css', 'main.js'];
const TEST_VAULT_PATH = 'test-vault/.obsidian/plugins/obsidian-dynamic-templates';

let testVaultPlugin = {
	name: 'test-vault',
	setup(build) {
		build.onEnd(result => {
			if (result.errors.length === 0) {
				for (const file of PLUGIN_FILES) {
					fs.copyFileSync(file, `${TEST_VAULT_PATH}/${file}`);
				}
			}
		})
	},
};

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	plugins: [testVaultPlugin],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}